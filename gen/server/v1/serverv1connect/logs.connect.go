// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server/v1/logs.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chushi-io/timber/gen/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LogsServiceName is the fully-qualified name of the LogsService service.
	LogsServiceName = "server.v1.LogsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LogsServiceForwardProcedure is the fully-qualified name of the LogsService's Forward RPC.
	LogsServiceForwardProcedure = "/server.v1.LogsService/Forward"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	logsServiceServiceDescriptor       = v1.File_server_v1_logs_proto.Services().ByName("LogsService")
	logsServiceForwardMethodDescriptor = logsServiceServiceDescriptor.Methods().ByName("Forward")
)

// LogsServiceClient is a client for the server.v1.LogsService service.
type LogsServiceClient interface {
	Forward(context.Context) *connect.ClientStreamForClient[v1.StreamLogsRequest, v1.StreamLogsResponse]
}

// NewLogsServiceClient constructs a client for the server.v1.LogsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLogsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LogsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &logsServiceClient{
		forward: connect.NewClient[v1.StreamLogsRequest, v1.StreamLogsResponse](
			httpClient,
			baseURL+LogsServiceForwardProcedure,
			connect.WithSchema(logsServiceForwardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// logsServiceClient implements LogsServiceClient.
type logsServiceClient struct {
	forward *connect.Client[v1.StreamLogsRequest, v1.StreamLogsResponse]
}

// Forward calls server.v1.LogsService.Forward.
func (c *logsServiceClient) Forward(ctx context.Context) *connect.ClientStreamForClient[v1.StreamLogsRequest, v1.StreamLogsResponse] {
	return c.forward.CallClientStream(ctx)
}

// LogsServiceHandler is an implementation of the server.v1.LogsService service.
type LogsServiceHandler interface {
	Forward(context.Context, *connect.ClientStream[v1.StreamLogsRequest]) (*connect.Response[v1.StreamLogsResponse], error)
}

// NewLogsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLogsServiceHandler(svc LogsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	logsServiceForwardHandler := connect.NewClientStreamHandler(
		LogsServiceForwardProcedure,
		svc.Forward,
		connect.WithSchema(logsServiceForwardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server.v1.LogsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LogsServiceForwardProcedure:
			logsServiceForwardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLogsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLogsServiceHandler struct{}

func (UnimplementedLogsServiceHandler) Forward(context.Context, *connect.ClientStream[v1.StreamLogsRequest]) (*connect.Response[v1.StreamLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.LogsService.Forward is not implemented"))
}
